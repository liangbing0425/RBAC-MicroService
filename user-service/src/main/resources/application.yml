server:
  port: 8081
spring:
  application:
    name: user-service
  cloud:
    seata:
      tx-service-group: my_test_tx_group  # Seata事务组
    nacos:
      discovery:
        server-addr: localhost:8848
      config:
        import: optional:nacos:user-service.yaml
        import-check:
          enabled: false
        server-addr: localhost:8848
        file-extension: yml
  rocketmq:
    producer:
      group: user-service-producer
      send-message-timeout: 5000
      retry-times-when-send-async-failed: 3
    consumer:
        consume-timeout: 60000
        suspend-current-queue-time-millis: 1000
        enable-message-trace: true # 开启消息轨迹追踪
    name-server: localhost:9876


# 分库分表配置
shardingsphere:
  datasource:
    names: ds0, ds1, ds_transaction
    ds0:
      type: com.zaxxer.hikari.HikariDataSource
      driver-class-name: com.mysql.cj.jdbc.Driver
      jdbc-url: jdbc:mysql://localhost:3306/shuzimali0?useSSL=false&serverTimezone=Asia/Shanghai&characterEncoding=utf-8
      username: root
      password: root
    ds1:
      type: com.zaxxer.hikari.HikariDataSource
      driver-class-name: com.mysql.cj.jdbc.Driver
      jdbc-url: jdbc:mysql://localhost:3306/shuzimali1?useSSL=false&serverTimezone=Asia/Shanghai&characterEncoding=utf-8
      username: root
      password: root
    ds_transaction:
      type: com.zaxxer.hikari.HikariDataSource
      driver-class-name: com.mysql.cj.jdbc.Driver
      jdbc-url: jdbc:mysql://localhost:3306/shuzimali?useSSL=false&serverTimezone=Asia/Shanghai&characterEncoding=utf-8
      username: root
      password: root
    sharding:
      tables:
        users:  # 对 user 表进行分库分表
          actual-data-nodes: ds$->{0..1}.users_$->{0..1}  # 分库分表规则（2库 × 2表）
          database-strategy:
            inline:
              sharding-column: user_id  # 按 user_id 分库
              algorithm-expression: ds$->{user_id % 2}  # 取模分库
          table-strategy:
            inline:
              sharding-column: user_id  # 按 user_id 分表
              algorithm-expression: users_$->{user_id % 2}  # 取模分表
    props:
      sql.show: true  # 打印SQL日志

# Seata
seata:
  enabled: true
  application-id: user-service
  tx-service-group: my_test_tx_group
  client:
    rm:
      async-commit-buffer-limit: 10000
      report-success-enable: true
      table-meta-check-enable: true
    tm:
      commit-retry-count: 5
      rollback-retry-count: 5
  service:
    vgroup-mapping:
      my_test_tx_group: default
    default-grouplist: 127.0.0.1:8091

springdoc:
  api-docs:
    enabled: true # 开启OpenApi接口
    path: /v3/api-docs  # 自定义路径，默认为 "/v3/api-docs"
  swagger-ui:
    enabled: true # 开启swagger界面，依赖OpenApi，需要OpenApi同时开启
    path: /swagger-ui.html # 自定义路径，默认为"/swagger-ui/index.html"
    # Packages to include,多个用 , 分割
    packagesToScan: org.shuzimali.userservice.controller